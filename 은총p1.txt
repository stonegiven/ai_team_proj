import pygame
import copy
import random
from itertools import product
import time
import math
from copy import deepcopy
from concurrent.futures import ThreadPoolExecutor


class Node:
    def __init__(self, state, parent=None):
        self.state = state
        self.parent = parent
        self.children = []
        self.visits = 0
        self.wins = 0

    def is_fully_expanded(self):
        return len(self.children) == len(self.state.get_legal_moves())

    def best_child(self, c_param=1.4):
        if not self.children:
            return self  # Fallback if no children
        weights = []
        for child in self.children:
            if child.visits == 0:  # Avoid division by zero
                weights.append(float('inf'))  # Prioritize unexplored nodes
            else:
                weights.append(
                    (child.wins / child.visits) +
                    c_param * math.sqrt(2 * math.log(self.visits) / child.visits)
                )
        return self.children[weights.index(max(weights))]



class MCTS:
    def __init__(self, root, simulations=1000):
        self.root = root
        self.simulations = simulations

    def best_action(self, time_limit=300):
        """Run MCTS within a time limit to determine the best action."""
        start_time = time.time()
        simulation_count = 0

        while time.time() - start_time < time_limit:
            self._run_simulation()  # Perform one simulation
            simulation_count += 1

        print(f"Total simulations run: {simulation_count}")
        return self.root.best_child(c_param=0)  # Select the best child based on win rate


    def _run_simulation(self):
        """Perform one iteration of MCTS: selection, expansion, simulation, and backpropagation."""
        # Step 1: Selection - Traverse the tree to find a node to simulate
        node = self._select(self.root)

        # Step 2: Simulation - Run a random simulation from the selected node
        reward = self._simulate(node.state)

        # Step 3: Backpropagation - Update the tree with the simulation result
        self._backup(node, reward)



    def _select(self, node):
        while not node.state.is_terminal():
            if not node.is_fully_expanded():
                return self._expand(node)
            node = node.best_child()
        return node

    def _expand(self, node):
        legal_moves = node.state.get_legal_moves()
        tried_moves = [child.state for child in node.children]

        for move in legal_moves:
            if move not in tried_moves:
                new_state = node.state.apply_move(move)
                new_node = Node(new_state, parent=node)
                node.children.append(new_node)
                return new_node
        return random.choice(node.children) if node.children else node

    def _simulate(self, state):
        current_state = deepcopy(state)
        while not current_state.is_terminal():
            legal_moves = current_state.get_legal_moves()
            move = random.choice(legal_moves)
            current_state = current_state.apply_move(move)
        return current_state.result()

    def _backup(self, node, reward):
        while node is not None:
            node.visits += 1
            node.wins += reward
            node = node.parent


import time

class P1:
    def __init__(self, board, available_pieces):
        self.pieces = [(i, j, k, l) for i in range(2) for j in range(2) for k in range(2) for l in range(2)]
        self.board = board  # Current game board (0: empty, 1~16: piece indices)
        self.available_pieces = available_pieces  # Available pieces as tuples

    def select_piece(self):
        """Select the best piece to give to the opponent."""
        start_time = time.time()
        best_piece = None
        max_score = float('-inf')
        for piece in self.available_pieces:
            # Skip pieces that immediately cause a loss
            if self._causes_immediate_loss(piece):
                continue
            
            # Simulate giving this piece to the opponent
            score = self._simulate_game(piece, simulate_for_opponent=True)
            
            # Choose the piece that minimizes the opponent's advantage
            if score > max_score:
                max_score = score
                best_piece = piece
        print(f"Piece selection time: {time.time() - start_time:.4f} seconds")
        return best_piece

    def place_piece(self, selected_piece):
        """Find the best location to place the piece."""
        if selected_piece is None:
            raise ValueError("Selected piece cannot be None.")

        start_time = time.time()
        best_loc = None
        max_score = float('-inf')
        available_locs = [(row, col) for row, col in product(range(4), range(4)) if self.board[row][col] == 0]

        for loc in available_locs:
            row, col = loc
            self.board[row][col] = self.pieces.index(selected_piece) + 1
            
            # Create a temporary GameState to check win
            temp_state = GameState(self.board, self.available_pieces, self.pieces, is_opponent_turn=False)
            
            if temp_state._check_win():
                print(f"Immediate win by placing at {loc}")
                self.board[row][col] = 0  # Reset before returning
                return loc  # Immediately place for a win
            
            # Simulate the game after placing the piece
            score = -self._simulate_game(selected_piece, simulate_for_opponent=False)
            self.board[row][col] = 0  # Reset the board after simulation
            
            # Choose the move that maximizes the player's advantage
            if score > max_score:
                max_score = score
                best_loc = loc

        print(f"Piece placement time: {time.time() - start_time:.4f} seconds")
        if best_loc is None:
            raise RuntimeError("No valid location found to place the piece.")
        return best_loc



    def _causes_immediate_loss(self, piece):
        """Check if giving this piece leads to immediate loss."""
        for row, col in product(range(4), range(4)):
            # Skip occupied cells
            if self.board[row][col] != 0:
                continue

            # Simulate placing the piece on the board
            simulated_board = copy.deepcopy(self.board)
            simulated_board[row][col] = self.pieces.index(piece) + 1

            # Create a simulated game state
            simulated_state = GameState(simulated_board, self.available_pieces, self.pieces, is_opponent_turn=True)

            # Check if this move results in a win for the opponent
            if simulated_state._check_win():
                return True

        return False

    
    def _simulate_game(self, piece, simulate_for_opponent, location=None):
        try:
            sim_board = deepcopy(self.board)
            sim_available_pieces = deepcopy(self.available_pieces)

            if location:
                sim_board[location[0]][location[1]] = self.pieces.index(piece) + 1

            if piece in sim_available_pieces:
                sim_available_pieces.remove(piece)

            # 생성된 GameState가 제대로 초기화되었는지 확인
            game_state = GameState(sim_board, sim_available_pieces, self.pieces, simulate_for_opponent)
            print(f"Simulated GameState: {game_state.board}")

            root = Node(game_state)
            mcts = MCTS(root)
            time_limit = 10  # 초 단위로 제한 시간
            best_action = mcts.best_action(time_limit=time_limit / 10)

            return best_action.state.result()
        except Exception as e:
            print(f"Simulation error: {e}")  # 디버깅 출력을 추가
            return 0


    def _heuristic_evaluation(self, state, move):
        """간단한 휴리스틱 평가."""
        row, col = move
        temp_board = deepcopy(state.board)
        temp_board[row][col] = 1  # 임시로 해당 위치에 배치
        temp_state = GameState(temp_board, state.available_pieces, state.pieces, state.is_opponent_turn)
        return temp_state.evaluate_board()


    
    def evaluate_board(self):
        """더 정교한 보드 상태 평가 함수."""
        score = 0
        for row in range(4):
            for col in range(4):
                if self.board[row][col] == 0:
                    score += 1  # 빈 칸 보너스
                elif self.board[row][col] > 0:
                    piece_idx = self.board[row][col] - 1
                    piece = self.pieces[piece_idx]
                    # 각 특성이 같거나 다른 정도에 따라 점수 추가
                    for i in range(4):
                        if all(p[i] == piece[i] for p in self._get_line_pieces(row, col)):
                            score += 10
                        elif len(set(p[i] for p in self._get_line_pieces(row, col))) == 4:
                            score -= 10

        if self._check_win():
            score += 1000 if not self.is_opponent_turn else -1000  # 승리/패배 큰 보너스
        return score


class GameState:
    def __init__(self, board, available_pieces, pieces, is_opponent_turn):
        self.board = board
        self.available_pieces = available_pieces
        self.pieces = pieces
        self.is_opponent_turn = is_opponent_turn

    def get_legal_moves(self):
        """Return all legal moves (row, col) for the current player."""
        return [(row, col) for row, col in product(range(4), range(4)) if self.board[row][col] == 0]

    def is_terminal(self):
        """Check if the game is in a terminal state (win or full board)."""
        return self._check_win() or not self.get_legal_moves()

    def random_play(self):
        """Simulate a random play."""
        legal_moves = self.get_legal_moves()
        if not legal_moves:
            return self

        move = random.choice(legal_moves)
        new_board = [row[:] for row in self.board]
        piece = random.choice(self.available_pieces)
        new_board[move[0]][move[1]] = self.pieces.index(piece) + 1

        return GameState(new_board, self.available_pieces, self.pieces, not self.is_opponent_turn)

    def result(self):
        """Evaluate the result of the game. 1 if win, 0 if loss."""
        if self._check_win():
            return 1 if not self.is_opponent_turn else 0
        return 0

    def apply_move(self, move):
        """Apply a move to the board and return a new game state."""
        row, col = move
        new_board = [row[:] for row in self.board]  # Deep copy the board
        new_board[row][col] = 1  # Mark the move (you can adjust this logic based on the game rules)

        # Return a new GameState reflecting the move
        return GameState(new_board, self.available_pieces, self.pieces, not self.is_opponent_turn)

    def _check_win(self):
        """Check if the current board state is a winning state."""
        for row in range(4):
            if self._check_line([self.board[row][col] for col in range(4)]):
                return True
        for col in range(4):
            if self._check_line([self.board[row][col] for row in range(4)]):
                return True
        if self._check_line([self.board[i][i] for i in range(4)]) or self._check_line([self.board[i][3 - i] for i in range(4)]):
            return True
        if self._check_square():  # Check for 2x2 square condition
            return True
        return False

    def _check_square(self):
        """Check if any 2x2 subgrid forms a win condition."""
        for row in range(3):  # Loop over all possible top-left corners of 2x2 squares
            for col in range(3):
                square = [
                    self.board[row][col],
                    self.board[row][col + 1],
                    self.board[row + 1][col],
                    self.board[row + 1][col + 1],
                ]
                if 0 not in square:  # Ensure all spots in the square are occupied
                    pieces = [self.pieces[idx - 1] for idx in square if idx > 0]
                    for i in range(4):  # Check each characteristic
                        if len(set(p[i] for p in pieces)) == 1:
                            return True
        return False

    def _check_line(self, line):
        if 0 in line:
            return False
        pieces = [self.pieces[idx - 1] for idx in line if idx > 0]
        for i in range(4):
            if len(set(p[i] for p in pieces)) == 1:
                return True
        return False
