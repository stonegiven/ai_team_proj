import numpy as np
import random
from itertools import product
import time
import copy

class P1():
    def __init__(self, board, available_pieces):
        self.pieces = [(i, j, k, l) for i in range(2) for j in range(2) for k in range(2) for l in range(2)]  # 총 16개의 조각
        self.board = board  # 현재 보드 상태 (0: 빈칸, 1~16: 조각 인덱스)
        self.available_pieces = available_pieces  # 현재 사용 가능한 조각들 (예: (1, 0, 1, 0))

    def select_piece(self):
        best_piece = None
        min_opponent_wins = float('inf')  # 상대 승리 가능성을 최소화하는 조각 선택
        start_time = time.time()

        for piece in self.available_pieces:
            opponent_wins = 0  # 해당 조각을 받은 후 상대 승리 횟수 추적

            for row, col in product(range(4), range(4)):
                if self.board[row][col] == 0:  # 빈칸에만 배치
                    temp_board = copy.deepcopy(self.board)
                    temp_board[row][col] = self.pieces.index(piece) + 1

                    # 상대가 즉시 승리 가능한지 확인
                    if self.check_win(temp_board):
                        opponent_wins += 1
                    else:
                        # Minimax로 상대의 최선 배치 결과를 확인
                        opponent_wins += self.minimax(temp_board, None, self.available_pieces, depth=2, maximizing_player=False)

            # 상대 승리 가능성이 최소인 조각 선택
            if opponent_wins < min_opponent_wins:
                min_opponent_wins = opponent_wins
                best_piece = piece

            # 제한 시간 초과 시 중단
            if time.time() - start_time > 300:  # 5분 제한
                break

        return best_piece if best_piece else random.choice(self.available_pieces)



    def place_piece(self, selected_piece):
        if selected_piece is None or selected_piece not in self.pieces:
            raise ValueError(f"Invalid selected_piece: {selected_piece}")

        available_locs = [(row, col) for row, col in product(range(4), range(4)) if self.board[row][col] == 0]
        best_loc = None
        max_score = float('-inf')
        start_time = time.time()

        # 1. 즉시 승리 조건 확인
        for row, col in available_locs:
            temp_board = copy.deepcopy(self.board)
            temp_board[row][col] = self.pieces.index(selected_piece) + 1

            if self.check_win(temp_board):  # 승리 조건 만족 시 해당 위치 반환
                return (row, col)

        # 2. Alpha-Beta Pruning 기반 최적 위치 탐색
        for row, col in available_locs:
            temp_board = copy.deepcopy(self.board)
            temp_board[row][col] = self.pieces.index(selected_piece) + 1

            # Minimax 탐색으로 위치 점수 계산
            score = self.minimax(temp_board, None, self.available_pieces, depth=2, maximizing_player=True)

            if score > max_score:
                max_score = score
                best_loc = (row, col)

            # 제한 시간 초과 시 중단
            if time.time() - start_time > 300:  # 5분 제한
                break

        # 3. 최적 위치 반환 (없으면 랜덤 선택)
        return best_loc if best_loc else random.choice(available_locs)


    def minimax(self, board, piece, available_pieces, depth, maximizing_player):
        """
        Minimax 알고리즘으로 승리 가능성 탐색.
        """
        if depth == 0 or self.check_win(board) or not available_pieces:
            return self.evaluate_board(board)

        if piece is not None and piece not in self.pieces:
            raise ValueError(f"Invalid piece passed to minimax: {piece}")

        if maximizing_player:
            max_eval = float('-inf')
            for row, col in product(range(4), range(4)):
                if board[row][col] == 0:
                    temp_board = copy.deepcopy(board)
                    if piece is not None:
                        temp_board[row][col] = self.pieces.index(piece) + 1
                    eval = self.minimax(temp_board, None, available_pieces, depth - 1, False)
                    max_eval = max(max_eval, eval)
            return max_eval
        else:
            min_eval = float('inf')
            for opponent_piece in available_pieces:
                for row, col in product(range(4), range(4)):
                    if board[row][col] == 0:
                        temp_board = copy.deepcopy(board)
                        temp_board[row][col] = self.pieces.index(opponent_piece) + 1
                        eval = self.minimax(temp_board, None, [p for p in available_pieces if p != opponent_piece], depth - 1, True)
                        min_eval = min(min_eval, eval)
            return min_eval

    def evaluate_board(self, board):
        """
        현재 보드 상태를 평가. P2의 승리 가능성과 P1의 승리 가능성을 모두 고려.
        """
        if self.check_win(board):
            return 100  # P2 승리
        if self.check_opponent_win(board):
            return -100  # P1 승리
        return 0  # 무승부

    def check_win(self, board):
        def check_line(line):
            if 0 in line or len(line) < 4:  # 빈칸이 있거나 길이가 4 미만이면 승리 조건 미달
                return False
            characteristics = [self.pieces[idx - 1] for idx in line if idx > 0]  # 조각 특성 추출
            for i in range(4):  # 4개의 특성 중 하나라도 동일하면 승리
                if len(set(char[i] for char in characteristics)) == 1:
                    return True
            return False

        # 1. 가로줄 확인
        for r in range(4):
            if check_line([board[r][c] for c in range(4)]):
                return True

        # 2. 세로줄 확인
        for c in range(4):
            if check_line([board[r][c] for r in range(4)]):
                return True

        # 3. 대각선 확인
        if check_line([board[i][i] for i in range(4)]) or check_line([board[i][3 - i] for i in range(4)]):
            return True

        # 4. 2x2 격자 확인
        for r in range(3):  # 0~2행
            for c in range(3):  # 0~2열
                subgrid = [board[r][c], board[r][c + 1], board[r + 1][c], board[r + 1][c + 1]]
                if 0 not in subgrid:  # 빈칸 없이 모든 칸에 조각이 있어야 함
                    characteristics = [self.pieces[idx - 1] for idx in subgrid]
                    for i in range(4):  # 4개의 특성 중 하나라도 동일하면 승리
                        if len(set(char[i] for char in characteristics)) == 1:
                            return True

        return False


    def check_opponent_win(self, board):
        return self.check_win(board)  # 동일한 로직을 재사용

